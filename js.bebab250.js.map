{"version":3,"sources":["assets/js/views/input.js","assets/js/models/IncomeItem.js","assets/js/models/ExpenseItem.js","assets/js/views/helper.js","assets/js/views/list.js","assets/js/models/state.js","assets/js/views/total.js","assets/js/index.js"],"names":["inputButton","document","getElementById","getInput","value","parseFloat","description","type","clearInput","Income","desc","id","Math","random","toString","substr","Expense","totalIncome","percentage","round","formatThous","num","res","length","displayMonth","date","year","month","Date","getFullYear","textContent","getMonth","nodeListForEach","node","callback","i","listView","itemContainer","incomeList","expenseList","item","markup","el","insertAdjacentHTML","percentages","elArr","querySelectorAll","idx","parentNode","removeChild","State","inc","exp","expTotals","incTotals","sum","forEach","prop","budget","push","idIndex","findIndex","e","splice","calculateTotal","calculateBudget","totalView","expenseTotal","incomeTotal","budgetTotal","totalExpensePercent","total","percent","state","TotalView","ListView","window","addEventListener","controlInput","keyCode","controlDelete","input","isNaN","handelInput","itemID","target","split","deleteItem","updateState","renderBudget","renderTotal","addItem","renderItem","calculatePercent","map","renderPercent"],"mappings":"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","file":"js.bebab250.js","sourceRoot":"../src","sourcesContent":["export const inputButton = document.getElementById(\"budgetInput\")\n\nexport const getInput = () => {\n  return {\n    value: parseFloat(document.getElementById(\"inputValue\").value),\n    description: document.getElementById(\"inputDesc\").value,\n    type: document.getElementById(\"inputType\").value,\n  };\n};\n\nexport const clearInput = () => {\n  document.getElementById(\"inputValue\").value = '';\n  document.getElementById(\"inputDesc\").value = '';\n};\n","export default class Income {\n  constructor(value, desc) {\n    this.id = \"_\" + Math.random().toString(36).substr(2, 9);\n    this.value = value;\n    this.description = desc;\n  }\n}\n","export default class Expense {\n  constructor(value, desc) {\n    this.id = \"_\" + Math.random().toString(36).substr(2, 9);\n    this.value = value;\n    this.description = desc;\n  }\n  calculatePercent(totalIncome) {\n    if (totalIncome > 0) {\n      this.percentage = Math.round((this.value / totalIncome) * 100);\n    } else {\n      this.percentage = -1;\n    }  \n  }\n}\n","export const formatThous = function (num) {\n  let res;\n  num = `${num}`\n  if (num.length > 3 && num.length < 7) {\n    // if 1k - 100k\n\n    res = `${num.substr(0, num.length - 3)},${num.substr(num.length - 3, 3)}`;\n  } else if (num.length > 6 && num.length < 9) {\n    // if 1 million\n    res = `${num.substr(0, 1)},${num.substr(1, 3)},${num.substr(\n      num.length - 3,\n      3\n    )}`;\n  } else if (num.length > 8) {\n    res = `${num.substr(0, 3)},${num.substr(3, 3)},${num.substr(\n      num.length - 3,\n      3\n    )}`;\n  } else {\n    res = num;\n  }\n\n  return res;\n};\n\nexport const displayMonth = () => {\n  let date, year, month;\n\n  date = new Date();\n\n  year = date.getFullYear();\n\n  month = [\n    \"January\",\n    \"Febuary\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  document.getElementById(\"month\").textContent = `Budget available in ${\n    month[date.getMonth()]\n  } ${year}`;\n}","import { formatThous } from \"./helper\";\n\nconst nodeListForEach = function (node, callback) {\n  for (let i = 0; i < node.length; i++) {\n    callback(node[i], i);\n  }\n};\n\nexport default class listView {\n  el = {\n    itemContainer: document.getElementById(\"itemList\"),\n    incomeList: document.getElementById(\"incomeList\"),\n    expenseList: document.getElementById(\"expenseList\"),\n  };\n\n  renderItem(type, item) {\n    let markup;\n    // if exp\n    if (type === \"exp\") {\n      markup = `\n        <div class=\"expense-item\" id=\"exp-${item.id}\">\n          <div class=\"item-description\">\n            <span id=\"item_description\">${item.description}</span>\n          </div>\n          <div class=\"item-right\">\n            <span class=\"item-value\">\n              ${formatThous(item.value)}\n              <span class=\"item_percent\"></span>\n            </span>\n            <span class=\"item-delete\" \n              ><i id=\"item_delete\" class=\"las la-trash-alt\"></i\n            ></span>\n          </div>\n        </div>\n        `;\n      this.el.expenseList.insertAdjacentHTML(\"beforeend\", markup);\n    } else {\n      // if inc\n      markup = `\n          <div class=\"income-item\" id=\"inc-${item.id}\">\n            <div class=\"item-description\">\n              <span id=\"item_description\">${item.description}</span>\n            </div>\n            <div class=\"item-right\">\n              <span class=\"item-value\">${formatThous(item.value)}</span>\n              <span class=\"item-delete\" \n                ><i id=\"item_delete\" class=\"las la-trash-alt\"></i\n              ></span>\n            </div>\n          </div>\n      `;\n      this.el.incomeList.insertAdjacentHTML(\"beforeend\", markup);\n    }\n  }\n  renderPercent(percentages) {\n    const elArr = document.querySelectorAll(\".item_percent\");\n\n    nodeListForEach(elArr, (el, idx) => {\n      if (percentages[idx] > 0) {\n        el.textContent = percentages[idx] + \"%\";\n      } else {\n        el.textContent = \"---\";\n      }\n    });\n  }\n  deleteItem(id) {\n    const elNode = document.getElementById(id);\n    elNode.parentNode.removeChild(el);\n  }\n}\n","export default class State {\n  constructor() {\n    this.inc = [];\n    this.exp = [];\n    this.expTotals = 0;\n    this.incTotals = 0;\n    this.percentage = -1;\n  }\n  calculateTotal(type) {\n    let sum = 0;\n    this[type].forEach((el) => {\n      sum += el.value;\n    });\n    const prop = `${type}Totals`;\n    this[prop] = sum;\n  }\n  calculateBudget() {\n    this.budget = this.incTotals - this.expTotals;\n    if (this.incTotals > 0) {\n      // calculate percentage\n      this.percentage = Math.round((this.expTotals / this.incTotals) * 100);\n    } else {\n      this.percentage = -1;\n    }\n  }\n  addItem(item, type) {\n    this[type].push(item);\n  }\n  deleteItem(type, id) {\n    const idIndex = this[type].findIndex(e => e.id === id)\n    if (idIndex !== -1) {\n      this[type].splice(idIndex, 1);\n    }\n  }\n  updateState() {\n    // calculate total\n    this.calculateTotal(\"inc\");\n    this.calculateTotal(\"exp\");\n  \n    // calculate budget\n    this.calculateBudget();\n\n  };\n  \n}\n","import { formatThous } from \"./helper\";\n\nexport default class totalView {\n  el = {\n    expenseTotal: document.getElementById(\"totalExpense\"),\n    incomeTotal: document.getElementById(\"totalIncome\"),\n    budgetTotal: document.getElementById(\"totalBudget\"),\n    totalExpensePercent: document.getElementById(\"totalExpensePercent\"),\n  };\n\n  renderTotal(type, total) {\n    if (type === \"inc\") {\n      this.el.incomeTotal.textContent = formatThous(total);\n    } else {\n      this.el.expenseTotal.textContent = formatThous(total);\n    }\n  }\n  renderBudget(budget, percent) {\n    this.el.budgetTotal.textContent = formatThous(budget);\n    if (percent > 0) {\n      this.el.totalExpensePercent.textContent = `${percent}%`;\n    } else {\n      this.el.totalExpensePercent.textContent = \"--\";\n    }\n  }\n}\n","import { getInput, clearInput, inputButton } from \"./views/input\";\nimport Income from \"./models/IncomeItem\";\nimport Expense from \"./models/ExpenseItem\";\nimport  listView  from \"./views/list\";\nimport State from \"./models/state\";\nimport  totalView  from \"./views/total\";\nimport { displayMonth } from \"./views/helper\";\n\n// state\nconst state = new State();\nconst TotalView = new totalView();\nconst ListView = new listView();\n\n/************************\n *  EVENT LISTENER\n ************************/\nwindow.addEventListener(\"load\", displayMonth); // window load listener\n\ninputButton.addEventListener(\"click\", controlInput); // input listener\n\nwindow.addEventListener(\"keypress\", function (e) { // input listener\n  if (e.keyCode == \"13\") {\n    controlInput();\n  }\n});\n\nListView.el.itemContainer.addEventListener(\"click\", controlDelete); // Delete listener\n\n\n/************************\n *  APP CONTROLLER\n ************************/\n\nconst controlInput = () => {\n  const input = getInput();\n\n  if (input.description !== \"\" && !isNaN(input.value) && input.value > 0) {\n    \n    handelInput(input);\n    \n    clearInput();\n  }\n};\n\nconst controlDelete = (e) => {\n  let itemID, id, type;\n  \n  itemID = e.target.parentNode.parentNode.parentNode.id;\n\n  if (itemID) {\n    id = itemID.split(\"-\")[1];\n\n    type = itemID.split(\"-\")[0];\n\n    state.deleteItem(type, id);\n\n    deleteItem(itemID);\n\n    state.updateState()\n\n    TotalView.renderBudget(state.budget)\n\n    TotalView.renderTotal(\"inc\", state.incTotals)\n\n    TotalView.renderTotal(\"exp\", state.expTotals)\n    \n  }\n};\n\n/************************\n *  APP handler\n ************************/\nconst handelInput = (input) => {\n  // create new item base on type\n  const item =\n    input.type === \"inc\"\n      ? new Income(input.value, input.description)\n      : new Expense(input.value, input.description);\n\n  // put type into var\n  const type = input.type;\n\n  const total = `${type}Totals`;\n\n  // add item to state\n  state.addItem(item, type);\n\n  // render item\n  ListView.renderItem(type, item)\n\n  // calculate total\n  state.calculateTotal(type);\n\n  // render total\n  TotalView.renderTotal(type, state[total])\n  // renderTotal(type, state[total]);\n\n  // calculate budget\n  state.calculateBudget();\n\n  // display budget\n  TotalView.renderBudget(state.budget, state.percentage)\n  // renderBudget(state.budget, state.percentage);\n\n  // calculate percentages\n  state.exp.forEach((e) => {\n    e.calculatePercent(state.incTotals);\n  });\n\n  // percentages arr\n  let percentages = state.exp.map((e) => e.percentage);\n\n  // render percentages\n  ListView.renderPercent(percentages)\n};"]}